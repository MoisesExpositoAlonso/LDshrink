// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/LDshrink.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// calc_spve_naive
double calc_spve_naive(const Matrix_external R, const arrayxd_external beta, const arrayxd_external beta_hat, const arrayxd_external se_hat, const int n);
RcppExport SEXP LDshrink_calc_spve_naive(SEXP RSEXP, SEXP betaSEXP, SEXP beta_hatSEXP, SEXP se_hatSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Matrix_external >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arrayxd_external >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arrayxd_external >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< const arrayxd_external >::type se_hat(se_hatSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_spve_naive(R, beta, beta_hat, se_hat, n));
    return rcpp_result_gen;
END_RCPP
}
// calc_spve
Eigen::ArrayXd calc_spve(const Eigen::MatrixXd& R, const Eigen::MatrixXd& beta_mat, const Eigen::MatrixXd& beta_hat_mat, const Eigen::MatrixXd& se_hat_mat, const int n);
RcppExport SEXP LDshrink_calc_spve(SEXP RSEXP, SEXP beta_matSEXP, SEXP beta_hat_matSEXP, SEXP se_hat_matSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type beta_hat_mat(beta_hat_matSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type se_hat_mat(se_hat_matSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_spve(R, beta_mat, beta_hat_mat, se_hat_mat, n));
    return rcpp_result_gen;
END_RCPP
}
// sub_calc_spve
Eigen::ArrayXd sub_calc_spve(const Eigen::MatrixXd& R, const Eigen::MatrixXd tbeta, const int n);
RcppExport SEXP LDshrink_sub_calc_spve(SEXP RSEXP, SEXP tbetaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type tbeta(tbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_calc_spve(R, tbeta, n));
    return rcpp_result_gen;
END_RCPP
}
// calc_nmsum
double calc_nmsum(const double m);
RcppExport SEXP LDshrink_calc_nmsum(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_nmsum(m));
    return rcpp_result_gen;
END_RCPP
}
// calc_theta
double calc_theta(const double m);
RcppExport SEXP LDshrink_calc_theta(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_theta(m));
    return rcpp_result_gen;
END_RCPP
}
// ld2df
Rcpp::DataFrame ld2df(const Matrix_external ldmat, Rcpp::StringVector rsid, const double r2cutoff);
RcppExport SEXP LDshrink_ld2df(SEXP ldmatSEXP, SEXP rsidSEXP, SEXP r2cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Matrix_external >::type ldmat(ldmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type rsid(rsidSEXP);
    Rcpp::traits::input_parameter< const double >::type r2cutoff(r2cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(ld2df(ldmat, rsid, r2cutoff));
    return rcpp_result_gen;
END_RCPP
}
// calc_cov_exp
Eigen::MatrixXd calc_cov_exp(Matrix_external mat);
RcppExport SEXP LDshrink_calc_cov_exp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_cov_exp(mat));
    return rcpp_result_gen;
END_RCPP
}
// calc_variance_exp
Eigen::ArrayXd calc_variance_exp(Matrix_external mat);
RcppExport SEXP LDshrink_calc_variance_exp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_variance_exp(mat));
    return rcpp_result_gen;
END_RCPP
}
// cov_2_cor_exp
Eigen::MatrixXd cov_2_cor_exp(Matrix_external covmat);
RcppExport SEXP LDshrink_cov_2_cor_exp(SEXP covmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type covmat(covmatSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_2_cor_exp(covmat));
    return rcpp_result_gen;
END_RCPP
}
// calcLD_exp
Eigen::MatrixXd calcLD_exp(Matrix_external hmata, arrayxd_external mapa, const double m, const double Ne, const double cutoff);
RcppExport SEXP LDshrink_calcLD_exp(SEXP hmataSEXP, SEXP mapaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< arrayxd_external >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(calcLD_exp(hmata, mapa, m, Ne, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// sp_calcLD_exp
Eigen::SparseMatrix<double> sp_calcLD_exp(Matrix_external hmata, arrayxd_external mapa, const double m, const double Ne, const double cutoff);
RcppExport SEXP LDshrink_sp_calcLD_exp(SEXP hmataSEXP, SEXP mapaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< arrayxd_external >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_calcLD_exp(hmata, mapa, m, Ne, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// sp_calcLD_symm_exp
Eigen::SparseMatrix<double> sp_calcLD_symm_exp(Matrix_external hmata, arrayxd_external mapa, const double m, const double Ne, const double cutoff);
RcppExport SEXP LDshrink_sp_calcLD_symm_exp(SEXP hmataSEXP, SEXP mapaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Matrix_external >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< arrayxd_external >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_calcLD_symm_exp(hmata, mapa, m, Ne, cutoff));
    return rcpp_result_gen;
END_RCPP
}
