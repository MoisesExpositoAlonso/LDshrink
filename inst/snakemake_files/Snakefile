import numpy as np
import pandas as pd
# from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
# FTP = FTPRemoteProvider()

KG_dir="../../../../../../../media/nwknoblauch/Data/1kg/"
#KG_dir="../../../../../../group/xhe-lab/1KG/"


#LD_break_file_url="https://bitbucket.org/nygcresearch/ldetect-data/raw/ac125e47bf7ff3e90be31f278a7b6a61daaba0dc/EUR/fourier_ls-all.bed"
LD_break_file="fourier_ls-all.bed"

LD_df=pd.read_csv(LD_break_file,delim_whitespace=True)
LD_df['region_id']=LD_df.index+1
def filter_chrom(df,chrom):
    return list(df[df['chr']=="chr"+str(chrom)]['region_id'])

TEMPF="temp_data.gds"

#localrules: dl_panel_info
        # expand(KG_dir+"gds/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.gds",chr=range(1,23))
                #KG_dir+"gds/ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes_seq_hapmap.gds"
NREPS =4
PVE=np.linspace(0.01,0.9,num=9)
BIAS=np.linspace(0,0.1,num=3)
TOT_SIM=NREPS*PVE.size*BIAS.size
FGENEID=range(1,TOT_SIM+1)
                #        dynamic()
kgf=expand(KG_dir+"eur_w_ld_chr/{chrom}.l2.ldscore.gz",chrom=range(1,23))
sim_gf=expand(KG_dir+"ldsc_sim_16/sim_{fgeneid}.sumstats.gz",fgeneid=range(1,TOT_SIM))
n_simf=expand(KG_dir+"ldsc_est_16/sim_{fgeneid}.tsv",fgeneid=range(1,TOT_SIM))

        # 
        # expand(KG_dir+"ldsc_est_16/sim_{fgeneid}.tsv",fgeneid=FGENEID)
        # legf=KG_dir+"gds/ALL_seq_hapmap.gds"
rule all:
    input:
        logf=expand(KG_dir+"{method}_est_{gwas}_{chrom}/sim_results.tsv",
                    chrom="16",method=["RSSp","ldsc"],gwas=["gwas","direct"])

        


#         
# #        expand(KG_dir+"ldsc_sim_16/sim_{fgeneid}.sumstats.gz",fgeneid=FGENEID)


wildcard_constraints:
    chrom="\d+"


        
rule subset_gds:
    input:
        mapf=KG_dir+"1000-genomes-genetic-maps/interpolated_hapmap.RDS",
        temp_gds=expand(KG_dir+"gds/ALL.chr{chr}.gds",chr=range(1,23)),
        geno_gdsf=expand(KG_dir+"gds/ALL.chr{chr}_geno.gds",chr=range(1,23)),
        breakf=LD_break_file
    output:
        gdsf=KG_dir+"gds/ALL_seq_hapmap.gds"
        geno_gdsf=KG_dir+"gds/ALL_seq_hapmap_geno.gds"
    threads: 1
    script:
        "gds_subset.R"        

    

rule merge_LD_region:
    input:
        evdf=lambda wildcards: expand(KG_dir+"EVD_H5/1KG_hapmap_{LDchunk}.h5",LDchunk=filter_chrom(LD_df,wildcards.chrom))
    output:
        evd_chunkf=KG_dir+"EVD_CHROM_H5/1KG_hapmap_{chrom}.h5"
    script:
        "concat_h5.R"
rule ldsc_chunk:
    input:
        gdsf=rules.subset_gds.output.gdsf
    params:
        chrom="{chrom}",
        outdir=KG_dir+"eur_w_ld_chr"
    output:
        outf=KG_dir+"eur_w_ld_chr/{chrom}.l2.ldscore.gz",
        soutf=KG_dir+"eur_w_ld_chr/{chrom}.l2.M_5_50"
    script:
        "ldsc_chunk.R"

rule RSSp_chrom:
    input:
        gdsf=rules.subset_gds.output.gdsf
        sumstatf=expand(KG_dir+"ldsc_sim_{{gwas}}_{{chrom}}/sim_{fgeneid}.sumstats.gz",fgeneid=FGENEID),
        evd_chunkf=KG_dir+"EVD_CHROM_H5/1KG_hapmap_{chrom}.h5"
    params:
        fgeneid=expand("{fgeneid}",fgeneid=FGENEID)
    output:
        logf=KG_dir+"RSSp_est_{gwas}_{chrom}/sim_results.tsv"
    script:
        "RSSP_chunk.R"

rule ldsc_chrom_est:
    input:
        ldsc_f="ldsc/ldsc.py",
        sumstatf=KG_dir+"ldsc_sim_{gwas}_{chrom}/sim_{fgeneid}.sumstats.gz",
        chroml2=KG_dir+"eur_w_ld_chr/{chrom}.l2.ldscore.gz"
    params:
        out_pref=KG_dir+"ldsc_est_{gwas}_{chrom}/sim_{fgeneid}",
        ld_dir=KG_dir+"eur_w_ld_chr/"
    output:
        logf=KG_dir+"ldsc_est_{gwas}_{chrom}/sim_{fgeneid}.log"
    shell:
        "python2 ldsc/ldsc.py --h2 {input.sumstatf} --ref-ld-chr {params.ld_dir} --w-ld-chr {params.ld_dir} --out {params.out_pref}"
        
rule ldsc_parse_est:
    input:
        logf=expand(KG_dir+"ldsc_est_{{gwas}}_{{chrom}}/sim_{fgeneid}.log",fgeneid=FGENEID),
        tparamf=expand(KG_dir+"ldsc_sim_{{gwas}}_{{chrom}}/sim_{fgeneid}_tparam.tsv",fgeneid=FGENEID)
    output:
        logf=KG_dir+"ldsc_est_{gwas}_{chrom}/sim_results.tsv"
    params:
        fgeneid=expand("{fgeneid}",fgeneid=FGENEID)
    script:
        "parse_ldsc.R"
    
rule get_ldsc:
    output:
        "ldsc/ldsc.py"
    shell:
        "git clone https://github.com/bulik/ldsc.git"
    
rule sim_ldsc_chrom:
    input:
        gdsf=rules.subset_gds.output.gdsf
    params:
        chrom="{chrom}",
        fgeneid=expand("{fgeneid}",fgeneid=FGENEID),
        pve=PVE,
        bias=BIAS,
        nreps=NREPS
    output:
        outf=expand(KG_dir+"ldsc_sim_gwas_{{chrom}}/sim_{fgeneid}.sumstats.gz",fgeneid=FGENEID),
        soutf=expand(KG_dir+"ldsc_sim_gwas_{{chrom}}/sim_{fgeneid}_tparam.tsv",fgeneid=FGENEID)
    script:
        "sim_chrom_ldsc.R"


rule sim_ldsc_chrom_direct:
    input:
        evd_chunkf=KG_dir+"EVD_CHROM_H5/1KG_hapmap_{chrom}.h5",
        gdsf=rules.subset_gds.output.gdsf

    params:
        chrom="{chrom}",
        fgeneid=expand("{fgeneid}",fgeneid=FGENEID),
        pve=PVE,
        bias=BIAS,
        nreps=NREPS
    output:
        outf=expand(KG_dir+"ldsc_sim_direct_{{chrom}}/sim_{fgeneid}.sumstats.gz",fgeneid=FGENEID),
        soutf=expand(KG_dir+"ldsc_sim_direct_{{chrom}}/sim_{fgeneid}_tparam.tsv",fgeneid=FGENEID)
    script:
        "sim_chrom_ldsc_direct.R"
        
        
# rule t_ld_chunks:
#     input:
#         gdsf=KG_dir+"gds/ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes_seq_hapmap.gds"
#     output:
#         temp_chunkf="{LDchunk}.txt"
#     script:
#         "list_ld_regions.R"

# rule dl_panel_info:
#     input:
#         FTP.remote("ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel",
#                    keep_local=True)
#     params:
#         pop="EUR"
#     output:
#         outf="EUR.samples"
#     shell:
#         "cat {input} | grep -w '{params.pop}' | awk '{{print $1}}' > {output.outf}"


# rule vcf_filt_hap:
#     input:
#         vcff=KG_dir+"vcf/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
#         panelf="EUR.samples"
        
#     output:
#         KG_dir+"_filt/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"
rule impute_2_snpgds:
    input:

        hapf=KG_dir+"impute/ALL.chr{chr}.impute.hap",
        legf=KG_dir+"impute/ALL.chr{chr}.impute.legend",
        mapf=KG_dir+"1000-genomes-genetic-maps/interpolated_hapmap/chr{chr}.interpolated_genetic_map.gz",
        filt_f="EUR.samples"
    params:
        chrom="{chr}"
    output:
        gdsf=KG_dir+"gds/ALL.chr{chr}.gds",
        geno_gdsf=KG_dir+"gds/ALL.chr{chr}_geno.gds"
    script:
        "impute_2_seqgds.R"

    


rule vcf_2_impute:
    input:
        vcff=KG_dir+"vcf/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        filt_f="EUR.samples"
    params:
        out_pref=KG_dir+"impute/ALL.chr{chr}"
    output:
        hapf=KG_dir+"impute/ALL.chr{chr}.impute.hap",
        legf=KG_dir+"impute/ALL.chr{chr}.impute.legend"
    shell:
        "vcftools --gzvcf {input.vcff} --IMPUTE --out {params.out_pref} --keep {input.filt_f} --min-alleles 2 --max-alleles 2 --maf 0.05"

        
     
    
rule vcf_2_gds_all:
    input:
        vcff=expand(KG_dir+"vcf/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",chr=range(1,23))
    output:
        temp_gds=temp("ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes_seq_hapmap.gds"),
    threads: 10
    script:
        "vcf2seq_gds.R"        

# rule snpgds_2_seqgds:
#     input:
#         temp_gds="snp_gds/ALL.chr{chr}.snp_gds"
#     output:
#         temp_seq="snp_gds/ALL.chr{chr}.seq_gds"
#     script:
#         "snp_2_seqgds.R"

        
# rule dl_vcf:
#     input:
#         FTP.remote("ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",keep_local=True)
#     output:
#         KG_dir+"vcf/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz"

#     run:
#         shell("mv {input} {output}")

# rule dl_vcf_tbi:
#     input:
#         FTP.remote("ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi",keep_local=True)
#     output:
#         "vcfs/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi"


#     run:
#         shell("mv {input} {output}")

rule map_file_RDS:
    input:
        mapf=expand(KG_dir+"1000-genomes-genetic-maps/interpolated_hapmap/chr{chr}.interpolated_genetic_map.gz",chr=range(1,23))
    output:
        mapf=KG_dir+"1000-genomes-genetic-maps/interpolated_hapmap.RDS"
    script:
        "map2RDS.R"

rule ld_chunk_1kg:
    input:
        gdsf=KG_dir+"gds/ALL.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes_seq_hapmap.gds"
#        ldf="{LDchunk}.txt"
    output:
        evdf=temp(KG_dir+"EVD_H5/1KG_hapmap_{LDchunk}.h5")
    params:
        region_id="{LDchunk}"
    script:
        "evd_1kg.R"

        
rule extract_cell_array:
    input:
        filename="genotype.mat"
    output:
        filename="genotype.h5"
    params:
        groupname="snp_info"
    run:
        import h5py
        import numpy as np
        with h5py.File(input.filename,'r') as f:
            data = [ f[element[0]][:] for element in f[params.groupname]]

        with h5py.File(output.filename,'w') as wf:
            for i in range(len(data)):
                wf.create_dataset(params.groupname+'/'+str(i),data[i].shape,data=data[i])
                
